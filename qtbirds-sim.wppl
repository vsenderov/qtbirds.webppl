/**
 * @file A Simulator for QT-Birds Data Algorithm 1 (direct approach)
 * @author Viktor Senderov
 * 
 * Produces samples of Q-T-Birds data, formated as JSON.
 * 
 * PREREQUISITES
 * 
 * If needed install and activate npm and node:
 * 
 *   nvm install-latest-npm
 *   nvm install node
 *   nvm use node
 * 
 * REQUIRED PACKAGES
 * 
 *   - itself
 *   - https://www.npmjs.com/package/fasta2json
 *   - webppl-fs
 *   - phyjs - to process phylogenetic trees
 * 
 * USAGE
 * 
 *   webppl qtbirds-sim.wppl --require fasta2json 
 *                           --require . 
 *                           --require webppl-fs
 *                           --require phyjs -- ...
 * 
 * where ... are the following  
 * 
 *   FILE.fasta - starting genetic sequence at the root 1
 *   TREE.phyjson - fixed phylogenetic tree 2
 *   RATE.json - initial rate values at the root
 *   PHENO.json - possible phenotypic character states
 *   Q-MOL.json - molecular Q-matrix
 *   Q-PHENO.json - phenotypic Q-matrix
 * 
 * EXAMPLE (copy-pasteable)
 * Simualte qt-birds evolution along the JeremyCRBD tree using a single nucleotide and single character;
 * with fixed rates rescaled for one nucleotide;
 * Mk and JC69 models.
 
webppl qtbirds-sim.wppl --require fasta2json --require . --require webppl-fs --require phyjs -- phylo/single-nuc.fasta phylo/jeremy-crbd.tre.phyjson rates/fixed-a-scale1.json pheno/2state.json nucleo/jc69.Q.json pheno/mk-2state.Q.json 1
 
 * 
 */

// read the molecular data from argument 1
var fasta = fasta2json.ReadFasta(argv["_"][1])
var startNucSeq = fasta[0].seq // TODO potential issue with multiple sequences
var geneLength = startNucSeq.length
var startStateSeq = map( 
  function(element) { nucleotides.indexOf(element) },
  startNucSeq
)

// READ TREE 2
var tree = phyjs.read_phyjson(argv["_"][2])

// read the rates and time data from argument 3
// TODO do some error checking if file exists
var rates = JSON.parse(fs.read(argv["_"][3]))
var lam = rates.lam
var mu = rates.mu
var nu = rates.nu
// TODO we don't care about time - it's all in the tree
//var time = rates.time

// read the phenotypic data from argument 4
var characters = JSON.parse(fs.read(argv["_"][4]))
var startingCharState = characters.characters.indexOf(characters.startingCharacter)
var nChar = characters.characters.length

// read the molecular model (Q-matrix) from argument 5
//var Q = jc69()
// HKY
// var Q = hky85([0.1, 0.1, 0.4, 0.4], 1)

var Q = JSON.parse(fs.read(argv["_"][5]))
// Transition probability matrix is computed from the instantenous rate matrix
var P = transition_probabilities(Q)

// Possible next states, hard-coded
var nextStates = [ [1, 2, 3],
                   [0, 2, 3],
                   [0, 1, 3],
                   [0, 1, 2] ]

var molecularModel = {
  rate: mu,
  Q: Q,
  P: P,
  nextStates: nextStates,
  nucleotides: nucleotides
}

// read the phenotypic model from argument 6
//var QChar = calcQ_senderovPhenotypic(nChar)
var QChar = JSON.parse(fs.read(argv["_"][6]))
var PChar = transition_probabilities_n(QChar)
var nextStatesChar = possible_next_states(nChar)

var phenotypeModel = {
  rate: lam/geneLength,
  Q: QChar,
  P: PChar,
  nextStates: nextStatesChar,
  characters: characters.characters
}

var mixedModel = {
  rate: nu/geneLength
}

var model = function() {

  var evRes = evolveTree(
     tree,
     evolve,
     //time,
     startStateSeq,
     startingCharState,
     phenotypeModel,
     molecularModel,
     mixedModel
   )


  return evRes
  
}


var dist = Infer({
   method: 'SMC',
    particles: 1,
    model: model
 })

JSON.stringify(dist.samples)
 

