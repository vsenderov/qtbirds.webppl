/**
 * @file Inference engine for Q-T-Birds
 * @author Viktor Senderov
 * 
 * Produces posterior estimates of Q-T-Birds params
 * 
 * - this function seems to be broken in the moment (2023-05-02
 * - it uses data which is not quite tree and it also does the incorrect adjuststments for identifiability
 * - use inf2 for now
 * 
 * PREREQUISITES
 * 
 * If needed install and activate npm and node:
 * 
 *   nvm install-latest-npm
 *   nvm install node
 *   nvm use node
 * 
 * REQUIRED PACKAGES
 * 
 *   - itself
 *   - https://www.npmjs.com/package/fasta2json
 *   - webppl-fs
 *   - TODO phyjs - to process phylogenetic trees
 * 
 * USAGE
 * 
 *   webppl qtbirds-inf.wppl --require fasta2json --require . --require webppl-fs -- ...
 * 
 * where ... is
 * 
 *   DATA.json - observations
 *   RATE.json - prior rates
 *   CHARACTERS.json - possible character states
 *   Q-MOL.json - molecular q-matrix
 *   Q-PHENO.json - phenotypic q-matrix
 */

var nucleotides = ["a", "c", "g", "t"]  // TODO Validate vs AGCT encoding

// read data from argument 1

var data = JSON.parse(fs.read(argv["_"][1]))

// read the rates and time data from argument 2
// TODO do some error checking if file exists
var rates = JSON.parse(fs.read(argv["_"][2]))
var time = rates.time

// // read the phenotypic data from argument 3
var characters = JSON.parse(fs.read(argv["_"][3]))
// var startingCharState = characters.characters.indexOf(characters.startingCharacter)
var nChar = characters.characters.length

// read the molecular model (Q-matrix) from argument 4
var Q = JSON.parse(fs.read(argv["_"][4]))

// Transition probability matrix is computed from the instantenous rate matrix
var P = transition_probabilities(Q)

// Possible next states, hard-coded
var nextStates = [ [1, 2, 3],
                   [0, 2, 3],
                   [0, 1, 3],
                   [0, 1, 2] ]


// read the phenotypic model from argument 5
var QChar = JSON.parse(fs.read(argv["_"][5]))
var PChar = transition_probabilities_n(QChar)
var nextStatesChar = possible_next_states(nChar)

var experimentName = argv["_"][6]

var model = function() {
  var lamA = gamma({shape: rates.lam.shape, scale: rates.lam.scale})
  var muA = gamma({shape: rates.mu.shape, scale: rates.mu.scale})
  var nuA = gamma({shape: rates.nu.shape, scale: rates.mu.scale})

  // TODO I should not allow for identifiability stuff
  // find a = min of lambda and mu
  // add a to nu
  // substract a from  both

  var a = Math.min(lamA, muA)

  var lam = lamA - a
  var mu = muA - a
  var nu = nuA + a

  var molecularModel = {
    rate: mu,
    Q: Q,
    P: P,
    nextStates: nextStates
 }

 var phenotypeModel = {
  rate: lam,
  Q: QChar,
  P: PChar,
  nextStates: nextStatesChar
 }

  var mixedModel = {
    rate: nu
  }

  // transform the data to states
  // decoding nucleotides to states and characters to character states
  var processData = function(i) {
    if (i + 1 >= data.length) { 
      // we are done 
      return
    } else {
      // wlog left
      var leftEndStateSeq = map( 
        function(element) { nucleotides.indexOf(element) },
        data[i].value.endSeq
      )
      var leftEndCharState = characters.characters.indexOf(data[i].value.endChar)

      // wlog right
      var rightEndStateSeq = map( 
        function(element) { nucleotides.indexOf(element) },
        data[i + 1].value.endSeq 
      )
      var rightEndCharState = characters.characters.indexOf(data[i  + 1].value.endChar)
      // TODO Invert the model!  No need to invert if the model is time-symmetric
      
      coalesce(time, leftEndStateSeq, rightEndStateSeq, 
        leftEndCharState, rightEndCharState, phenotypeModel, molecularModel, mixedModel)

      processData(i + 2)
    }
  }

  processData(0)

  return {lam, mu, nu}
  
}

var nSweeps = 20
var nParts = 50000

var infer = function() {
  var dist = Infer({
    method: 'SMC',
     particles: nParts,
     rejuvSteps: 0,
     model: model
  })
  return dist
}

var dists = repeat(nSweeps, infer)

fs.write(experimentName + "-output.json", JSON.stringify(dists))

var logz = map(function(dist) {
    return dist.normalizationConstant
}, dists)

fs.write(experimentName + "-logz.json", JSON.stringify(logz))

